functions
	essesse of programming. make things resuable. 
	widespread use case 
	

scope
	abbreviation to remember: LEGB, local, enclosing, global, built-in
	basically, python has an order in which it will look for function names
	if you call print(x) in a function, it'll look in the function first for x, then enclosing, then a global x definition, finally in the builtins
	local scope: variables assinged within function
	enclosing scope: pertains to nested functions. if a function is called within a function, it'll look in the first functions scope (local), then the enclosing functions local scope (aka enclosing scope), then global, builtins
	global scope: in the main body of the file
	built-in: to view built in scope: import builtins, print(dir(builtins))
	use global keyword to get access to global variable (within  a fucntion for example)
	use the nonlocal keyword to access a variable in an enclosing function

lambda functions
	aka anonymous functions. same thing
	lambda keyword tells python you're writing an anonymous function
	you can save the lamdba expression to a variable, which allows you to use it as a normal function
	doesn't work with multiline functions
	really nice b/c you can inject it as an argument into other variables
	useful when you need a short, throw-away function

exceptions
	objects containing description of error and traceback to where the error occurred 
	try, except, else, finally
	try: execute this first, if an error then go to except. if not errors then go to else. lastly, ALWAYS run the finally block
	be as explicit in the except block as possible. except Exception is super broad and will capture every error. 
	you want to explicitly indicate what error you are expecting. you want to catch errors that you expect, not all errors
	by explicitly handling specific errors, you also ensure that other errors will kill the program, instead of being handled and moving forward
	you can add multiple except blocks. 
	put more specific exceptions at the top. if a general error is at the top, then that block will run, never hitting the specific error
	else runs code that needs to be executed IF the try clause doesn't raise any errors 

iterators
	iterable = something that you can loop over (list, tuples, strings)
	itertools modules: functions for iteration. 
	
iterators v generators
	in python 2: range (iterator) vs xrange (generator). use of generator can be faster
	range first generates a lsit in range(n) and then begins operations on it
	xrange creates a generator, which manufacturs the next element in the sequence as needed. can be faster b/c you're not wasting front-end time to generate the list
	
args and kwargs
	*args collects all the POSITIONAL arguments into one variable as a TUPLE
	**kwargs collects all KEYWORD arguments into one variable as a DICT

map, filter, reduce
	map(function, iterable): performs the function on each element in the iterable. pass it to list() to get a list of the outputs
	filter(function, iterable): returns the data for which the function is true. pass to list() to get list of outputs
	reduce: 99% of the time, explicit for loop is more readable. 
	
errors and exceptions
	exceptions - caught during execution, use try/except clauses
	if you just use except: , you catch all errors. you can also specifiy except TypeError (for example), to catch ONLY that particular kind of error
	
	
	

	